#include "imports/stdlib.fc";

forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> tuple tpush(tuple t, X value) asm "TPUSH";
forall X -> tuple set_val_at(tuple t, X value, int position) asm "SETINDEXVAR";
forall X -> (tuple, ()) ~set_val_at(tuple t, X value, int position) asm "SETINDEXVAR";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {   
    ;; Tupla de adyacentes
    tuple nf = to_tuple([-1, -1, -1, 0, 0, 1, 1, 1]);
    tuple nc = to_tuple([-1, 0, 1, -1, 1, -1, 0, 1]);

    ;; Penalizacion x celda
    int a = 1;
    int b = 962;
    int c = 924483;
    int worstCase = 888428164;

    ;; Inicializar la matriz a modificar y la de ancestros 
    tuple dp = empty_tuple();
    tuple anc = empty_tuple();
    int row = 0;
    repeat(n){
        tuple dpNextRow = empty_tuple();
        tuple ancNextRow = empty_tuple();
        repeat(m){
            dpNextRow~tpush(worstCase);
            ancNextRow~tpush(pair(-1,-1));
        }
        dp~tpush(dpNextRow);
        anc~tpush(ancNextRow);
        row = row + 1;
    }
    
    ;; Buscar la posicion inicial y final
    int x = 0;
    int y = 0;
    int fx = 0;
    int fy = 0;
    row = 0;
    repeat(n){
        int col = 0;
        tuple nextRow = maze.at(row);
        repeat(m){
            if(nextRow.at(col) == 83){
                x = row;
                y = col;
            }
            if(nextRow.at(col) == 69){
                fx = row;
                fy = col;
            }
            col = col + 1;
        }
        row = row + 1;
    }

    ;; Marcar la posicion inicial con valor 0
    dp~set_val_at(dp.at(x).set_val_at(0, y), x);

    ;; Hacer el bellman-ford
    repeat(n * m - 1){
        ;; Me muevo por cada posicion de la matriz
        row = 0;
        repeat(n){
            int col = 0;
            tuple nextRow = dp.at(row);
            repeat(m){
                ;; Intento moverme para todos los vecinos
                int k = 0;
                int valA = nextRow.at(col);
                repeat(8){
                    int nrow = row + nf.at(k);
                    int ncol = col + nc.at(k);
                    if((nrow >= 0) & (nrow < n) & (ncol >= 0) & (ncol < m)){
                        int ascii_value = maze.at(nrow).at(ncol);
                        if(ascii_value != 83){
                            int valB = dp.at(nrow).at(ncol);
                            int cost = c;
                            if((ascii_value == 46) | (ascii_value == 69)){
                                cost = a;
                            }
                            elseif(ascii_value == 63){
                                cost = b;
                            }
                
                            if(valB > valA + cost){
                                anc~set_val_at(anc.at(nrow).set_val_at(pair(row, col), ncol), nrow);
                                dp~set_val_at(dp.at(nrow).set_val_at(valA + cost, ncol), nrow);
                            }
                        }
                    }
                    k = k + 1;
                }
                col = col + 1;
            }
            row = row + 1;
        }
    }

    int cntX = 0;
    int probability = 0;
    int length = 1;

    var (cx, cy) = anc.at(fx).at(fy).unpair();

    while((cx != x) | (cy != y)){
        length = length + 1;

        int ascii_value = maze.at(cx).at(cy);
        if(ascii_value == 88){
            cntX = cntX + 1;
        }
        elseif(ascii_value == 63){
            probability = probability + 1;
        }

        maze~set_val_at(maze.at(cx).set_val_at(33, cy), cx);

        (cx, cy) = anc.at(cx).at(cy).unpair();
    }

    return (cntX, probability, length, maze);
}