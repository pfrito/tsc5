#include "imports/stdlib.fc";

int equal_slices?(slice a, slice b) asm "SDEQ";
slice slice_last(slice s, int len) asm "SDCUTLAST";

cell get_users() method_id {
    var store = get_data().begin_parse();
    (slice adminAddress, cell users) = (store~load_msg_addr(), store~load_dict());
    
    return users;
}

int get_user_share(slice user_address) method_id {
    slice userAddress = slice_last(user_address, 256);
    int accountId = userAddress~load_uint(256);
    cell users = get_users();
    (slice val, int key) = users.udict_get?(256, accountId);

    return val~load_uint(32);
}

int get_total_share() method_id {
    int total_share = 0;
    cell users = get_users();
    var (key, val, flag) = users.udict_get_min?(256);
    while (flag) {
        total_share = total_share + val~load_uint(32);
        (key, val, flag) = users.udict_get_next?(256, key);
    }
    return total_share;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()){
        return ();
    }
    
    var store = get_data().begin_parse();
    var ms = in_msg_full.begin_parse();
    ms~load_uint(4);

    int op = in_msg_body~load_uint(32);
    int queryId = in_msg_body~load_uint(64);
    cell users = get_users();
    slice adminAddress = store~load_msg_addr();
    slice senderAddress = ms~load_msg_addr();

    if(op == 0x368ddef3){
        throw_unless(120, equal_slices?(adminAddress, senderAddress));

        (slice address, int share) = (in_msg_body~load_msg_addr().slice_last(256), in_msg_body~load_uint(32));
        int accountId = address~load_uint(256);
        users~udict_set(256, accountId, begin_cell().store_uint(share, 32).end_cell().begin_parse());

        set_data(begin_cell().store_slice(adminAddress).store_dict(users).end_cell());
    }
    elseif(op == 0x278205c8){
        throw_unless(120, equal_slices?(adminAddress, senderAddress));
        
        slice address = in_msg_body~load_msg_addr().slice_last(256);
        int accountId = address~load_uint(256);
        (slice val, int key) = users.udict_get?(256, accountId);

        throw_if(121, val.slice_empty?());

        users~udict_delete?(256, accountId);

        set_data(begin_cell().store_slice(adminAddress).store_dict(users).end_cell());
    }
    elseif(op == 0x068530b3){
        throw_if(122, users.dict_empty?());

        int totalShare = get_total_share();
        var (key, val, flag) = users.udict_get_min?(256);
        while (flag) {
            slice recipientAddress = begin_cell().store_uint(0x400, 11).store_uint(key, 256).end_cell().begin_parse();
            cell message = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(recipientAddress)
                .store_coins(val~load_uint(32) * msg_value / totalShare)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();

            (key, val, flag) = users.udict_get_next?(256, key);
            
            send_raw_message(message, 1);
        }
    }
    else {
        throw_if(122, users.dict_empty?());

        int amount = in_msg_body~load_coins();
        int totalShare = get_total_share();

        (int key, slice val, int flag) = users.udict_get_min?(256);
        while (flag) {
            slice recipientAddress = begin_cell().store_uint(0x400, 11).store_uint(key, 256).end_cell().begin_parse();

            cell body = begin_cell()
                .store_uint(0x0f8a7ea5, 32)
                .store_uint(queryId, 64)
                .store_coins(val~load_uint(32) * amount / totalShare)
                .store_slice(recipientAddress)
                .store_slice(recipientAddress)
                .store_uint(0, 1)
                .store_coins(1)
                .store_uint(0, 1)
            .end_cell();

            cell message = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(senderAddress)
                .store_coins(20000000)
                .store_uint(1, 107)
                .store_ref(body)
            .end_cell();

            (key, val, flag) = users.udict_get_next?(256, key);
            
            send_raw_message(message, 0);
        }
    }
}