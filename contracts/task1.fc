#include "imports/stdlib.fc";

(int, int, slice, int) load_data () inline {
  var ds = get_data().begin_parse();
  return (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() recv_external(slice ext_in_msg_body) impure {
  int op = ext_in_msg_body~load_uint(32);
  int queryid = ext_in_msg_body~load_uint(64);
  var (public_key, execution_time, receiver, seqno) = load_data();
  if(op == 0x9df10277){
    var signature = ext_in_msg_body~load_bits(512);
    cell ref = ext_in_msg_body~load_ref();
    slice cellToLoad = ref.begin_parse();
    int locked_for = cellToLoad~load_uint(32);
    int new_seqno = cellToLoad~load_uint(32);
    cellToLoad.end_parse();
    throw_if(119, new_seqno != seqno + 1);
    throw_if(120, ~ check_signature(cell_hash(ref), signature, public_key));
    throw_if(121, locked_for <= 0);
    throw_if(122, execution_time < now());
    throw_if(123, now() + locked_for < execution_time);
    accept_message();
    execution_time = now() + locked_for;
    set_data(begin_cell().store_uint(public_key, 256).store_uint(execution_time, 32).store_slice(receiver).store_uint(new_seqno, 32).end_cell());
  }
  if(op == 0xbb4be234){
    throw_if(124, execution_time > now());
    accept_message();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(receiver)
        .store_grams(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .end_cell();
    send_raw_message(msg, 128);
  }
}

;; Get methods

int get_seqno() method_id {
    var (public_key, execution_time, receiver, seqno) = load_data();
    return seqno;
}

int get_execution_time() method_id {
    var (public_key, execution_time, receiver, seqno) = load_data();
    return execution_time;
}