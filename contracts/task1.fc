#include "imports/stdlib.fc";

(int, int, slice, int) load_data () inline {
  var ds = get_data().begin_parse();
  return (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() recv_external(slice ext_in_msg_body) impure {
  int op = ext_in_msg_body~load_int(32);
  var (public_key, execution_time, receiver, seqno) = load_data();
  if(op == 0x9df10277){
    slice ref = ext_in_msg_body.load_ref();
    int locked_for = ref~load_uint(32);
    int new_seqno = ref~load_uint(32);
    var signature = ext_in_msg_body~load_bits(512);
    throw_if(119, new_seqno != seqno + 1);
    throw_if(120, check_signature(slice_hash(ext_in_msg_body), signature, public_key));
    throw_if(121, locked_for <= 0);
    throw_if(122, execution_time < now());
    throw_if(123, now() + locked_for < execution_time);
    execution_time = now() + locked_for;
    set_data(begin_cell().store_uint(public_key, 256).store_uint(execution_time, 32).store_slice(receiver).store_uint(new_seqno, 32));
  }
}

;; Get methods

int get_seqno() method_id {
  return get_data().begin_parse().preload_uint(32).preload_uint(32);
}

int get_execution_time() method_id {
  return get_data().begin_parse().preload_uint(32);
}